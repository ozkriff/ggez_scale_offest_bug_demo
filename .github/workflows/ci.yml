name: CI

on: [pull_request, push]

jobs:
  format:
    name: Rustfmt
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          profile: minimal
          override: true

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install packages
        run: |
          sudo apt-get -yq --no-install-suggests --no-install-recommends install libx11-dev libxi-dev libgl1-mesa-dev

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          profile: minimal
          override: true

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings

  build:
    name: ${{ matrix.build }}
    runs-on: ${{ matrix.os }}

    # The build matrix does not yet support 'allow failures' at job level.
    # See `jobs.nightly` for the nightly job definition.
    strategy:
      matrix:
        build: [Linux, macOS, Win32, Win64]

        include:
          - build: Linux
            os: ubuntu-latest
            packages: libx11-dev libxi-dev libgl1-mesa-dev
          - build: macOS
            os: macOS-latest
          - build: Win32
            os: windows-latest
            rust: stable-i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - build: Win64
            os: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust || 'stable' }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -yq --no-install-suggests --no-install-recommends install libasound2-dev libudev-dev

      - name: Install resvg
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            cargo install resvg
          elif [ "$RUNNER_OS" == "macOS" ]; then
            cargo install resvg
          elif [ "$RUNNER_OS" == "Windows" ]; then
            curl -sL https://github.com/RazrFalcon/resvg/releases/download/v0.11.0/viewsvg-win.zip -O
            7z x viewsvg-win.zip
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi

      - name: Export assets
        shell: bash
        run: |
          python ./utils/assets_export.py
          ls -lR assets

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --examples --all

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

  wasm:
    name: WASM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          profile: minimal
          override: true

      # - name: Build assets # TODO

      - name: Build
        run: |
          ./utils/wasm/build.sh

  nightly:
    name: Nightly
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

        include:
          - os: ubuntu-latest
            packages: libx11-dev libxi-dev libgl1-mesa-dev

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install packages (Linux)
        if: runner.os == 'Linux' && matrix.packages
        run: |
          sudo apt-get -yq --no-install-suggests --no-install-recommends install ${{ matrix.packages }}

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Build
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --examples --all

      - name: Test
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all
